name: CI/CD Pipeline

on:
  workflow_dispatch:
    inputs:
      logLevel:
        description: 'Log level'
        required: true
        default: 'warning'
        type: choice
        options:
        - info

  push:
    paths-ignore:
      - '.github/**'
      - 'api/**'
      - 'etl/**'
      - 'CHANGELOG.md'
      - '.gitignore'
      - '.pylintrc'
      - 'README.md'
    branches:
      - "main"
        
env:
  GAR_LOCATION: us-central1
  VERSION_NUMBER: '2.5'
  CLOUD_BUCKET: ${{ secrets.CLOUD_BUCKET }}
  EMAIL: ${{ secrets.EMAIL }}
  NAME: ${{ secrets.NAME }}
  PROJECT_ID: ${{ secrets.PROJECT_ID }}
  REGISTRY_REPO: ${{ secrets.REGISTRY_REPO }}
  WIF_PROVIDER: ${{ secrets.WIF_PROVIDER }}
  WIF_SERVICE_ACCOUNT_ARTIFACT_REGISTRY: ${{ secrets.WIF_SERVICE_ACCOUNT_ARTIFACT_REGISTRY }}
  WIF_SERVICE_ACCOUNT_CLOUD_STORAGE: ${{ secrets.WIF_SERVICE_ACCOUNT_CLOUD_STORAGE }}
  SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
  
jobs:

  build-streamlit-image:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        
      - name: Prepare Docker Build Context
        run: |
          mkdir docker-context
          mkdir docker-context/.streamlit
          cp ./.dockerignore docker-context
          cp ./Dockerfile docker-context
          cp ./streamlit_app.py docker-context
          cp ./requirements.txt docker-context
          cp -r ./.streamlit/config.toml docker-context/.streamlit
        
      - name: Build and Export
        uses: docker/build-push-action@v4
        with:
          context: ./docker-context
          tags: streamlit:${{ env.VERSION_NUMBER }}
          outputs: type=docker,dest=/tmp/streamlit.tar
          
      - name: Upload Artifact
        uses: actions/upload-artifact@v3
        with:
          name: streamlit
          path: /tmp/streamlit.tar
          
  syft:
    permissions:
      contents: 'read'
      id-token: 'write'
      
    runs-on: ubuntu-latest
    needs: [build-streamlit-image]
    if: |
      always() &&
      (needs.build-streamlit-image.result == 'success')
    steps:
    
      - name: Checkout
        uses: actions/checkout@v3
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        
      - name: Download Artifact
        uses: actions/download-artifact@v3
        with:
          name: streamlit
          path: /tmp
        
      - name: Load Image
        run: |
          docker load --input /tmp/streamlit.tar
          docker image ls -a
          
      - uses: anchore/sbom-action@v0
        with:
          image: streamlit:${{ env.VERSION_NUMBER }}
          artifact-name: streamlit-sbom-${{ env.VERSION_NUMBER }}.spdx.json
          upload-artifact: true
          
  grype:
    permissions:
      actions: read
      contents: read
      security-events: write
      
    needs: [syft]
    runs-on: ubuntu-latest
    steps:
    
      - uses: actions/download-artifact@v3
        with:
          name: streamlit-sbom.spdx.json
          
      - name: Scan SBOM
        uses: anchore/scan-action@v3
        id: scan
        with:
          sbom: streamlit-sbom-${{ env.VERSION_NUMBER }}.spdx.json
          fail-build: false
          output-format: sarif
          
      - name: Upload SARIF Report
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: ${{ steps.scan.outputs.sarif }}
  
  security:
    runs-on: ubuntu-latest
    
    permissions:
      actions: read
      contents: read
      security-events: write

    steps:
        - uses: actions/checkout@v3
        - name: Run Snyk to check for vulnerabilities
          uses: snyk/actions/python-3.10@master
          continue-on-error: true # To make sure that SARIF upload gets called
          env:
            SNYK_TOKEN: ${{ env.SNYK_TOKEN }}
          with:
            args: --sarif-file-output=snyk.sarif
        - name: Upload result to GitHub Code Scanning
          uses: github/codeql-action/upload-sarif@v2
          with:
            sarif_file: snyk.sarif
